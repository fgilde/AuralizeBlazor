@using AuralizeBlazor.Options
@using Nextended.Core.Helper
@using AuralizeBlazor.Extensions
@using System.Text
@using Microsoft.AspNetCore.Components.Web.Virtualization

@inherits BlazorJs.BlazorJsBaseComponent<Auralizer>

<style>
    .test {
        opacity: 0.7 !important;
        font-size: 10pt !important;        
    }
    .test-vis {
        opacity: 1 !important;
        font-size: 12pt !important;
        text-decoration: underline;
    }
    .blazor-audio-visualizer-overlay-mode {
        margin: 0 auto;
        position: relative;
    }

    .blazor-audio-visualizer-overlay-mode canvas {
        bottom: 0;
        pointer-events: none; /* let mouse clicks pass to the underlying video element */
        position: absolute;
        touch-action: none; /* ditto for touch events */
    }

    #@(_id).blazor-audio-visualizer canvas {
        transition-property:opacity!important;
        transition-duration:.3s;
        transition-timing-function:ease;
        opacity: @Opacity.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
    }

    #@(_id).blazor-audio-visualizer:not(:fullscreen):hover canvas {
        opacity: @HoverOpacity.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
    }
    audio {
        height: 40px;
    }
    audio,
    video {
        display: block;
        width: 100%;
    }
</style>


<div @ref="ElementReference"
     class="@($"blazor-audio-visualizer-container {_containerMouseOverCls} {Class}")"
     style="@($"{(OverlayChildContent && ChildContent != null ? "" : $"{StyleStr()}")} {Style}")"
     tabindex="1"
     @onclick="HandleClick"
     @onkeydown="HandleKeyDown"
     @onkeypress="HandleKeyPress"
     @onkeyup="HandleKeyUp"
     @onmouseover="@HandleContainerMouseOver"
     @onmouseout="@HandleContainerMouseOut">
    @if (_trackListVisible || TrackListBehaviour == SelectionListBehaviour.AlwaysVisible)
    {
        @RenderList(TrackList, TrackListClass, TrackListPosition, TrackListMode, true, t => t.Label, (t, _) => PlayTrackAsync(t), IsCurrentTrack)
    }
    @if (TrackListBehaviour == SelectionListBehaviour.Toggleable && TrackList?.Any() == true)
    {
        @RenderButton(TrackListToggleButtonPosition, () => _trackListVisible = !_trackListVisible, AudioIcons.TrackList)
    }
    @if (_presetListVisible || PresetListBehaviour == SelectionListBehaviour.AlwaysVisible)
    {
        RenderFragment<AuralizerPreset> itemTemplate = PreviewImageInPresetList ? PresetPreview : null;
        @RenderList(Presets, PresetListClass, PresetListPosition, PresetListMode, true, p => p.Name, (p, _) => ApplyPresetAsync(p, new PresetApplySettings(PresetApplyReason.UserSelectedFromList)), IsCurrentPreset, itemTemplate)
    }
    @if (PresetListBehaviour == SelectionListBehaviour.Toggleable && Presets?.Any() == true)
    {
        @RenderButton(PresetListToggleButtonPosition, () => _presetListVisible = !_presetListVisible, AudioIcons.Spectrum)
    }

    @if (_actionListVisible)
    {
        @RenderList(Actions, "action", Position.Mouse, SelectionListMode.Compact, false, p => p.GetLabel(), ExecuteAction)
    }

    @if (!string.IsNullOrEmpty(_message))
    {
        <p style="@($"{MessageStyle} {(IsMouseOver ? MouseOverMessageStyle : "")}")"
           class="@(_isMessageVisible ? $"message {MessageClass} {(IsMouseOver ? MouseOverMessageClass : "")}" : "message message-fade-out")">
            @_message
        </p>
    }
    
    @if(_showMeta && Meta != null) {
        var position = TrackInfoPosition;
    
        <div class="@($"selection-list {SelectionListMode.Compact.ToDescriptionString()} {position.ToDescriptionString()} meta-container {(_metaCollapsed ? "collapsed" : "")}")">
            <div class="meta-cover" @onclick="ToggleTagsVisibility">
                @if (!_metaCollapsed)
                {
                    <img src="@CoverImage" alt="Cover Image" class="cover-image"/>
                    @RenderButton(Position.TopRight, () => _showMeta = false, AudioIcons.Close)
                }
                @RenderButton(Position.TopLeft, () => _metaCollapsed = !_metaCollapsed, _metaCollapsed ? AudioIcons.ArrowUp : AudioIcons.ArrowDown)
                
                @RenderButton(Position.CenterLeft, () => { PreviousTrackAsync(_currentTrack);  }, AudioIcons.PreviousTrack, "hover-effect")
                @RenderButton(Position.CenterRight, () => { NextTrackAsync(_currentTrack);  }, AudioIcons.NextTrack, "hover-effect")
                <div class="meta-info @(_metaTagsHidden && !_metaCollapsed ? "hidden" : "")">
                    <p class="meta-title">@($"{string.Join(",", Meta.Tag.Performers)} - {@Meta.Tag.Title}")</p>
                    <p class="meta-tag">@Meta.Tag.Album</p>
                </div>
                @if (!_metaTagsHidden)
                {
                    <div class="meta-info-bottom">
                        <p class="meta-tag">@Meta.Tag?.Year</p>
                        <p class="meta-tag">@Meta.Tag?.JoinedGenres</p>
                        <p class="meta-tag">@Meta.Properties?.Duration.ToString("mm\\:ss")</p>
                    </div>
                }
            </div>
        </div>
    }


    @if (OverlayChildContent && ChildContent != null)
    {
        <div @ref="_visualizer"
             id="@_id"
             class="@($"blazor-audio-visualizer blazor-audio-visualizer-overlay-mode {_visualizerMouseOverCls}")"
             @onwheel="@HandleMouseWheel"
             @onmousemove="@HandleMouseMove"
             @onmouseover="@HandleVisualizerMouseOver"
             @onmouseout="@HandleVisualizerMouseOut">
            @ChildContent
        </div>
    }
    else
    {
        <div @ref="_visualizer"
             id="@_id"
             class="@($"blazor-audio-visualizer {_visualizerMouseOverCls}")"
             @onwheel="@HandleMouseWheel"
             @onmousemove="@HandleMouseMove"
             @onmouseover="@HandleVisualizerMouseOver"
             @onmouseout="@HandleVisualizerMouseOut">
        </div>
        @ChildContent
    }
</div>


@code
{

    private RenderFragment PresetPreview(AuralizerPreset preset)
    {
        var styleBuilder = new StringBuilder();
        var isSelected = IsCurrentPreset(preset);
        // styleBuilder.Append("font-size: 10pt;");
        styleBuilder.Append("opacity: 0;");
        if (isSelected)
        {
            styleBuilder.Append("color: var(--mud-palette-primary, yellow) !important;");
            styleBuilder.Append("font-weight: bold;");
        }

        return @<Auralizer InitialPreset="preset"
                           Style="cursor: pointer; border-bottom: 3px solid white; margin-bottom: 5px;"
                           InitialMessage="@preset.Name"
                           MessageStyle="@styleBuilder.ToString()"
                           MessageClass="test"
                           MouseOverMessageClass="test-vis"
                           OnClick="@(() => { _presetListVisible = false; ApplyPresetAsync(preset, new PresetApplySettings(PresetApplyReason.UserSelectedFromList)); })"
                           InitialRender="InitialRender.WithRandomData"
                           SimulateOnHover="true"
                           IsActive="false"
                           Height="100px">
               </Auralizer>;
    }

    private RenderFragment RenderButton(Position position, Action clickAction, string content, string cls="")
    {
        return @<div @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="clickAction" class="@($"selection-list-toggle-btn {position.ToDescriptionString()} {cls}")">
                   <svg class="icon-root icon-size-medium" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                       @((MarkupString)content)
                   </svg>
               </div>;
    }

    private RenderFragment RenderList<T>(ICollection<T> source,
        string cls,
        Position position,
        SelectionListMode mode,
        bool hideAllListsOnClick,
        Func<T, string> toString = null,
        Func<T, MouseEventArgs, Task> clickAction = null,
        Func<T, bool> isSelectedFunc = null,
        RenderFragment<T> itemTemplate = null)
    {        
        var additionalItemCls = position is Position.BottomLeft or Position.BottomRight ? "bottom" : "";        
        var style = position == Position.Mouse ? GetMousePosStyle() : "";
        var innerStyle = position == Position.Mouse ? "margin-top:0; margin-bottom:0" : "";
        var itemSize = itemTemplate != null ? 100 : 10;
        
        return @<div style="@style" class="@($"selection-list {mode.ToDescriptionString()} {position.ToDescriptionString()} {cls}")">
            <div style="@($"animation: none !important; {innerStyle}")" class="@($"inner-list {additionalItemCls}")">
                <Virtualize ItemSize="@itemSize" Items="source" Context="item">
                    @ListItem(item, hideAllListsOnClick, toString, clickAction, isSelectedFunc, itemTemplate)
                </Virtualize>
            </div>
        </div>;
    }
    
    private RenderFragment ListItem<T>(T item, bool hideAllListsOnClick,
        Func<T, string> toString = null,
        Func<T, MouseEventArgs, Task> clickAction = null,
        Func<T, bool> isSelectedFunc = null,
        RenderFragment<T> itemTemplate = null) {
            
        var hideAction = hideAllListsOnClick ? (Action)(HideAllOpenToggleableLists) : () => { };
        toString ??= (i) => i.ToString();
        isSelectedFunc ??= (i) => false;
        
        if (itemTemplate != null)
        {
            return itemTemplate(item);
        }
        @if (clickAction != null)
        {    
            return @<p class="@($"selectable-list-item {(isSelectedFunc(item) ? "selected" : "")}")" @onclick="(arg) => clickAction(item, arg).ContinueWith(_ => hideAction())">
                @Translate(toString(item))
            </p>;
            
        }  
        return @<p class="">@toString(item)</p>;        
    }
    
}