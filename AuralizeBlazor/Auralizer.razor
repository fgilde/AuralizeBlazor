@using AuralizeBlazor.Options
@using Nextended.Core.Helper
@inherits BlazorJs.BlazorJsBaseComponent<Auralizer>

<style>

    .blazor-audio-visualizer-overlay-mode {
        margin: 0 auto;
        position: relative;
    }

    .blazor-audio-visualizer-overlay-mode canvas {
        bottom: 0;
        pointer-events: none; /* let mouse clicks pass to the underlying video element */
        position: absolute;
        touch-action: none; /* ditto for touch events */
    }

    #@(_id).blazor-audio-visualizer canvas {
        transition-property:opacity!important;
        transition-duration:.3s;
        transition-timing-function:ease;
        opacity: @Opacity.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
    }

    #@(_id).blazor-audio-visualizer:not(:fullscreen):hover canvas {
        opacity: @HoverOpacity.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
    }
    audio {
        height: 40px;
    }
    audio,
    video {
        display: block;
        width: 100%;
    }
</style>


<div @ref="ElementReference"
     class="@($"blazor-audio-visualizer-container {containerMouseOverCls} {Class}")"
     style="@($"{(OverlayChildContent && ChildContent != null ? "" : $"{StyleStr()}")} {Style}")"
     @onmouseover="@HandleContainerMouseOver"
     @onmouseout="@HandleContainerMouseOut">
    @if (_trackListVisible || TrackListBehaviour == SelectionListBehaviour.AlwaysVisible)
    {
        @RenderList(TrackList, TrackListClass, TrackListPosition, TrackListMode, t => t.Label, PlayTrackAsync)
    }
    @if (TrackListBehaviour == SelectionListBehaviour.Toggleable && TrackList?.Any() == true)
    {
        @RenderListToggleButton(TrackListToggleButtonPosition, () => _trackListVisible = !_trackListVisible, AudioIcons.TrackList)
    }
    @if (_presetListVisible || PresetListBehaviour == SelectionListBehaviour.AlwaysVisible)
    {
        @RenderList(Presets, PresetListClass, PresetListPosition, PresetListMode, p => p.Name, p => ApplyPresetAsync(p))
    }
    @if (PresetListBehaviour == SelectionListBehaviour.Toggleable && Presets?.Any() == true)
    {
        @RenderListToggleButton(PresetListToggleButtonPosition, () => _presetListVisible = !_presetListVisible, AudioIcons.Spectrum)
    }
    @if (!string.IsNullOrEmpty(_message))
    {
        <p class="@(_isMessageVisible ? "message" : "message message-fade-out")">@_message</p>
    }
    @if (OverlayChildContent && ChildContent != null)
    {
        <div @ref="_visualizer"
             id="@_id"
             class="@($"blazor-audio-visualizer blazor-audio-visualizer-overlay-mode {visualizerMouseOverCls}")"
             @onwheel="@HandleMouseWheel"
             @onmouseover="@HandleVisualizerMouseOver"
             @onmouseout="@HandleVisualizerMouseOut">
            @ChildContent
        </div>
    }
    else
    {
        <div @ref="_visualizer"
             id="@_id"
             class="@($"blazor-audio-visualizer {visualizerMouseOverCls}")"
             @onwheel="@HandleMouseWheel"
             @onmouseover="@HandleVisualizerMouseOver"
             @onmouseout="@HandleVisualizerMouseOut">
        </div>
        @ChildContent
    }
</div>


@code
{

    private RenderFragment RenderListToggleButton(Position position, Action clickAction, string content)
    {
        return @<div @onclick="clickAction" class="@($"selection-list-toggle-btn {position.ToDescriptionString()}")">
                   <svg class="icon-root icon-size-medium" focusable="false" viewBox="0 0 24 24" aria-hidden="true">
                       @((MarkupString)content)
                   </svg>
               </div>;
    }

    private RenderFragment RenderList<T>(IEnumerable<T> source, string cls, Position position, SelectionListMode mode, Func<T, string> toString = null, Func<T, Task> clickAction = null)
    {
        var additionalItemCls = position is Position.BottomLeft or Position.BottomRight ? "bottom" : "";
        toString ??= (item) => item.ToString();
        return @<div class="@($"selection-list {mode.ToDescriptionString()} {position.ToDescriptionString()} {cls}")">
                   <div style="animation: none !important;" class="@($"inner-list {additionalItemCls}")">
                       @foreach (var item in source ?? Array.Empty<T>())
                       {
                           @if (clickAction != null)
                           {
                               <p class="@($"selectable-list-item")" @onclick="() => clickAction(item).ContinueWith(_ => HideAllOpenToggleableLists())">@toString(item)</p>
                           }
                           else
                           {
                               <p class="">@toString(item)</p>
                           }
                       }
                   </div>
               </div>;
    }
}