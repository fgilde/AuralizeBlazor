@inherits BlazorJs.BlazorJsBaseComponent<BlazorAudioVisualizer>
<style>
    .blazor-audio-visualizer {
        height: 100%;
        width: 100%;
    }
    .blazor-audio-visualizer-overlay-mode {
        margin: 0 auto;
        position: relative;
    }

    .blazor-audio-visualizer-overlay-mode canvas {
        bottom: 0;
        pointer-events: none; /* let mouse clicks pass to the underlying video element */
        position: absolute;
        touch-action: none; /* ditto for touch events */
    }

    .blazor-audio-visualizer canvas {
        opacity: @Opacity.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
    }

    .blazor-audio-visualizer:not(:fullscreen):hover canvas {
        opacity: @HoverOpacity.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
    }
    audio {
        height: 40px;
    }
    audio,
    video {
        display: block;
        width: 100%;
    }
</style>


<button @onclick="@(() =>ToggleFullScreen())">Fullscreen</button>
<button @onclick="@(() =>TogglePictureInPicture())">Pip</button>
<button @onclick="@(() =>ConnectToMicrophone())">Mic</button>
<div @ref="ElementReference" style="@($"{(Overlay && ChildContent != null ? "" : $"{StyleStr()}")}")">
    @if (Overlay && ChildContent != null)
    {
        <div @ref="_visualizer" class="@($"blazor-audio-visualizer {(Overlay && ChildContent != null ? "blazor-audio-visualizer-overlay-mode" : "")}")">
            @ChildContent
        </div>
    }
    else
    {
        <div @ref="_visualizer" class="@($"blazor-audio-visualizer {(Overlay && ChildContent != null ? "blazor-audio-visualizer-overlay-mode" : "")}")">
        </div>
        @ChildContent
    }
</div>


