@using AuralizeBlazor.Features
@using AuralizeBlazor.Options

<MudButton OnClick="@Simulate">Simulate</MudButton>
<Auralizer @ref=_vis
           @bind-Features="_features"
           OnContainerMouseOver="OnMouseIn"
           OnContainerMouseOut="OnMouseOut"
           InitialPreset="AuralizerPreset.ReflexMirror"
           InitialRender="InitialRender.WithFullSpectrumAudioDataPrefilledWithRandomData"
           KeepState="true"
           GradientChanged="@MainLayout.Instance.ColorsChanged"
           Presets="@AuralizerPreset.All.Except(new List<AuralizerPreset>{AuralizerPreset.ElectricPulse, AuralizerPreset.NeonPulse, AuralizerPreset.RoundBarsBarLevelColorMode}).ToArray()"
           OnPresetApplied="OnPresetApplied"
           TrackList="@TracksService.DemoTracks"
           Height="700px"
           BackgroundImage="/bg1.jpg"
           OnReady="@(() => _vis.ShowMessage("Welcome to Auralizer, press play !", TimeSpan.FromSeconds(2)))"
           DoubleClickAction="VisualizerAction.ToggleFullscreen"
           ClickAction="VisualizerAction.TogglePlayPause"
           Overlay="true">
    <center>
        <audio class="audio-main mud-ex-animate-all-properties" preload="metadata" loading="lazy" controls="true" src="@TracksService.MainDemoTrack.Url"></audio>
    </center>
</Auralizer>

@code {
    private Auralizer _vis;
    private IVisualizerFeature[] _features = [new ShowLogoFeature { Label = Const.AppName, Position = TextPosition.CenterCenter }, new SwitchPresetFeature { MinEnergy = .20 }];
    private readonly AuralizerPreset[] _presets = AuralizerPreset.All;

    private void OnPresetApplied(AppliedPresetEventArgs arg)
    {
        if (arg.ApplySettings.Reason is PresetApplyReason.UserSelectedFromList or PresetApplyReason.UserSelectedAsAction)
        {
            _vis.RemoveFeature<SwitchPresetFeature>();
        }
    }

    private async Task Simulate()
    {
        await _vis.SimulateFullAudioSpectrumAsync(null, 20, true);
        Console.WriteLine("DONNNE");
    }

    private async Task OnMouseIn()
    {
        if(_vis.JsReference is null || _vis.IsPlaying)
        {
            return;
        }
        var simulating = await _vis.IsSimulationRunning();
        if (!simulating)
        {
            _ = _vis.SimulateFullAudioSpectrumWithRandomLoadingDataAsync(null, 1, true);
            Console.WriteLine("Simulating");
        }
        else
        {
            await _vis.ResumeSimulationAsync();
        }
    }

    private async Task OnMouseOut()
    {
        await _vis.PauseSimulationAsync();
    }

}
